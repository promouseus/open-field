version: '3.2'
services:

  nifi:
    image: "apache/nifi:latest"
    restart: always
    ports:
      - "127.0.0.1:8081:8080"
      - target: 8086
        published: 8086
        protocol: udp
        mode: host
    volumes:
      - type: volume
        source: nifi-conf
        target: /opt/nifi/nifi-current/conf
        volume:
          nocopy: false
      #- type: bind
      #  source: ./
      #  target: /home/nifi/data
      #FROM apache/nifi:latest # all options below are for build base image
      #COPY our_process.nar /opt/nifi/nifi-1.11.0/lib/ # add your own nar
      #COPY our_workflow.xml /opt/nifi/nifi-1.11.0/conf/templates # add your own template
      #COPY --chown=nifi:nifi flow.xml.gz /opt/nifi/nifi-1.11.0/conf/ # Add preconfigured flow
      #EXPOSE 8080

  pulsar: 
    image: apachepulsar/pulsar:2.6.1
    restart: always
    ports:
      - "127.0.0.1:6650:6650"
      - "127.0.0.1:8080:8080"
    volumes:
      - "pulsardata:/pulsar/data"
      - "pulsarconf:/pulsar/conf"
    entrypoint: ["bin/pulsar", "standalone"]
  
  influx:
    image: influxdb:latest
    restart: always
    ports:
      - "127.0.0.1:8086:8086"
    volumes:
      - "influxdata:/var/lib/influxdb"
    environment:
      - "INFLUXDB_DB=db0"
      - "INFLUXDB_ADMIN_USER=admin"
      - "INFLUXDB_ADMIN_PASSWORD=supersecretpassword"

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - "grafana-storage:/var/lib/grafana"

  manager:
    image: alpine:latest
    restart: always
    entrypoint: top
    volumes:
      - type: volume
        source: nifi-conf
        target: /opt/nifi-conf
        #volume:
         # mode: 0440

# LibreNMS
  db:
    image: mariadb:latest
    container_name: librenms_db
    command:
      - "mysqld"
      - "--sql-mode="
      - "--innodb-file-per-table=1"
      - "--lower-case-table-names=0"
      - "--character-set-server=utf8"
      - "--collation-server=utf8_unicode_ci"
    volumes:
      - "librenms-db:/var/lib/mysql"
    environment:
      - "MYSQL_ALLOW_EMPTY_PASSWORD=yes"
    env_file: env/librenms.env
    restart: always

  librenms:
    image: librenms/librenms:latest
    container_name: librenms
    domainname: example.com
    hostname: librenms
    ports:
      - "127.0.0.1:8083:8000"
    depends_on:
      - db
    volumes:
      - "librenms-data:/data"
    env_file: env/librenms.env
    restart: always

  redis:
    image: redis:5.0-alpine
    container_name: librenms_redis
    env_file:
      - env/librenms.env
    restart: always

  dispatcher:
    image: librenms/librenms:latest
    container_name: librenms_dispatcher
    hostname: librenms-dispatcher
    depends_on:
      - librenms
      - redis
    volumes:
      - "librenms-data:/data"
    env_file:
      - env/librenms.env
    environment:
      - "SIDECAR_DISPATCHER=1"
      - "DISPATCHER_NODE_ID=dispatcher1"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=0"
    restart: always


# Netbox: https://github.com/netbox-community/netbox-docker
  netbox: &netbox
    image: netboxcommunity/netbox:latest
    depends_on:
      - postgres
      - redis
      - netbox-worker
    env_file: env/netbox.env
    user: '101'
    volumes:
      - netbox-nginx-config:/etc/netbox-nginx:z
      - netbox-static-files:/opt/netbox/netbox/static:z
      - netbox-media-files:/opt/netbox/netbox/media:z
  netbox-worker:
    <<: *netbox
    depends_on:
      - redis
    entrypoint:
      - python3
      - /opt/netbox/netbox/manage.py
    command:
      - rqworker
  nginx:
    command: nginx -c /etc/netbox-nginx/nginx.conf
    image: nginx:1.17-alpine
    depends_on:
      - netbox
    ports:
      - 127.0.0.1:8084:8080
    volumes:
      - netbox-static-files:/opt/netbox/netbox/static:ro
      - netbox-nginx-config:/etc/netbox-nginx/:ro
  postgres:
    image: postgres:11-alpine
    env_file: env/postgres.env
    volumes:
      - netbox-postgres-data:/var/lib/postgresql/data
  redis:
    image: redis:5-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: env/redis.env
    volumes:
      - netbox-redis-data:/data
  
# Icinga (all for now, but scalling back to icinga2 master only with API/events)
  db-icinga:
    image: mariadb:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: pwd
      MYSQL_DATABASE: icinga
      MYSQL_USER: icinga
      MYSQL_PASSWORD: icingapwd
    volumes:
      - icinga2-schema:/docker-entrypoint-initdb.d/
    depends_on:
      - master
  db-web:
    build: icinga2/db-web
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: pwd
      MYSQL_DATABASE: icingaweb
      MYSQL_USER: icingaweb
      MYSQL_PASSWORD: icingawebpwd
  master:
    build: icinga2/master
    restart: always
    ports:
      - "5665:5665"
    volumes:
      - icinga2-schema:/usr/share/icinga2-ido-mysql/schema
      - ./icinga2/master/conf.d/:/etc/icinga2/conf.d/
  web:
    build: icinga2/web
    restart: always
    volumes:
      - icingaweb2-app:/usr/share/webapps/icingaweb2
      - icingaweb2-etc:/etc/icingaweb2
    ports:
      - "8085:80"
    depends_on:
      - php
      - db-web
      - master
  php:
    build: icinga2/php
    restart: always
    volumes:
      - icingaweb2-app:/usr/share/webapps/icingaweb2
      - icingaweb2-etc:/etc/icingaweb2

volumes:
  nifi-conf:

  pulsardata:
  pulsarconf:

  influxdata:

  grafana-storage:

  librenms-data:
  librenms-db:

  netbox-static-files:
  netbox-nginx-config:
  netbox-media-files:
  netbox-postgres-data:
  netbox-redis-data:

  icingaweb2-app:
  icingaweb2-etc:
  icinga2-schema: